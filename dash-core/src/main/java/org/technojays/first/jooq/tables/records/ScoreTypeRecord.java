/**
 * This class is generated by jOOQ
 */
package org.technojays.first.jooq.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.technojays.first.jooq.tables.ScoreType;


/**
 * Types of scores associated with matches
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScoreTypeRecord extends UpdatableRecordImpl<ScoreTypeRecord> implements Record2<Integer, Object> {

	private static final long serialVersionUID = 1459197003;

	/**
	 * Setter for <code>first.score_type.id</code>. system id for this score type
	 */
	public ScoreTypeRecord setId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>first.score_type.id</code>. system id for this score type
	 */
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>first.score_type.info</code>. info for this match score
	 */
	public ScoreTypeRecord setInfo(Object value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>first.score_type.info</code>. info for this match score
	 */
	public Object getInfo() {
		return (Object) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Object> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Object> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return ScoreType.SCORE_TYPE.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Object> field2() {
		return ScoreType.SCORE_TYPE.INFO;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Object value2() {
		return getInfo();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ScoreTypeRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ScoreTypeRecord value2(Object value) {
		setInfo(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ScoreTypeRecord values(Integer value1, Object value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ScoreTypeRecord
	 */
	public ScoreTypeRecord() {
		super(ScoreType.SCORE_TYPE);
	}

	/**
	 * Create a detached, initialised ScoreTypeRecord
	 */
	public ScoreTypeRecord(Integer id, Object info) {
		super(ScoreType.SCORE_TYPE);

		setValue(0, id);
		setValue(1, info);
	}
}
